{namespace desktop.directory}

/**
 * Template that displays all states in the directory in a list view with a map of the united states.
 * @param isHttps
 * @param logo The business logo that is displayed in the header
 * @param baseUrl String the base url of current directory page
 * @param locationCount Number of locations in current directory
 * @param keys List of Objects: {key (name of this next directory level),
 *                               loc (location information of a location in this directory),
 *                               url (url of this directory level),
 *                               count(number of locations in this directory level)}
 * @param crumbNames Sorted list of breadcrumb names
 * @param crumbUrls Sorted list of breadcrumb urls
 */
{template .stateList}
  {call helpers.header data="all"}
      {param title: 'Directory - States'/}
  {/call}
      <h3>Keys</h3>
      <p>Total Locations: {$locationCount}</p>
      <ul>
        {foreach $key in $keys}
            <li><a href="{$baseUrl}{$key.url}">{$key.key}</a> ({$key.count}) [{lregionName('en', $key.loc.country, $key.key)}]</li>
        {/foreach}
      </ul>
  {call helpers.footer data="all"/}
{/template}

/**
 * Template that displays all keys in the directory in a list view with a dynamic map.
 * @param isHttps
 * @param logo The business logo that is displayed in the header
 * @param baseUrl String the base url of current directory page
 * @param locationCount Number of locations in current directory
 * @param keys List of Objects: {key (name of this next directory level),
 *                               loc (location information of a location in this directory),
 *                               url (url of this directory level),
 *                               count(number of locations in this directory level)}
 * @param crumbNames Sorted list of breadcrumb names
 * @param crumbUrls Sorted list of breadcrumb urls
 */
{template .cityList}
  {call helpers.header data="all"}
      {param title: 'Directory - Cities'/}
  {/call}
      <h3>Keys</h3>
      <p>Total Locations: {$locationCount}</p>
      <ul>
        {foreach $key in $keys}
            <li><a href="{$baseUrl}{$key.url}">{$key.key}</a> ({$key.count})</li>
        {/foreach}
      </ul>
  {call helpers.footer data="all"/}
{/template}

/**
 * Template that displays all locations in the directory in a list view with a dynamic map.
 * @param isHttps
 * @param logo The business logo that is displayed in the header
 * @param baseUrl String the base url of current directory page
 * @param locationCount Number of locations in current directory
 * @param keys List of Objects: {key (name of this next directory level),
 *                               loc (location information of a location in this directory),
 *                               url (url of this directory level),
 *                               count(number of locations in this directory level)}
 * @param crumbNames Sorted list of breadcrumb names
 * @param crumbUrls Sorted list of breadcrumb urls
 * @param locale
 */
{template .locationList}
  {call helpers.header data="all"}
      {param title: 'Directory - Locations'/}
  {/call}
      <h3>Keys</h3>
      <p>Total Locations: {$locationCount}</p>
      <ul>
        {foreach $key in $keys}
        <li>
              {if $key.url}
              <a href="{$baseUrl}{$key.url}">{$key.key}</a> (<a href="{$baseUrl}/alias1/{$key.url}">alias 1</a>) (<a href="{$baseUrl}/alias2/{$key.url}">alias 2</a>)
              {else}
               {$key.key}
              {/if}
              ({$key.count})
              <p/>
              {let $loc: $key.loc /}
              <div class="grid__item column--4 grid__item-nobg grid__item-autoheight">
                <a href="{$baseUrl}{$key.url}"
                   class="location-list-title-link">
                  <h2 class="location-list-title">
                    {call common.helpers.location_name data="$loc" /}
                  </h2>
                </a>
                {call components.address data="$loc"}
                  {param stateAbbr: true /}
                  {param schemaOrg: false /}
                {/call}
                {call components.hours.location_hours_today data="$loc" /}
                {let $local}
                  {foreach $phone in $loc.phones}
                    {if $phone.type == 'LOCAL'}
                      1
                    {/if}
                  {/foreach}
                {/let}
                {let $hasLocal: strlen($local ?: '') > 0 /}
                {let $formatForLocaleByCountry: [
                  'en': ['US': 'NATIONAL'],
                  'en-gb': ['GB': 'NATIONAL']
                  ]
                /}
                {let $phoneFormat: $formatForLocaleByCountry[$locale]?[$loc.country]?: 'INTERNATIONAL' /}
                {if $hasLocal}
                  {call components.phones_with_include data="$loc"}
                    {param includeKeys: ['LOCAL'] /}
                    {param labelMap: ['LOCAL': ''] /}
                    {param format: $phoneFormat /}
                  {/call}
                {else}
                  {call components.phones_with_include data="$loc"}
                    {param includeKeys: ['MAIN'] /}
                    {param labelMap: ['MAIN': ''] /}
                    {param format: $phoneFormat /}
                  {/call}
                {/if}

                <div class="location-list-links">
                  {call components.maps.get_directions data="$loc" /}
                  {call common.helpers.uber_button data="$loc" /}
                </div>
              </div>
         </li>
        {/foreach}
      </ul>
  {call helpers.footer data="all"/}
{/template}
